@page "/tank-history"
@using Agas1.Logic.Models
@using Agas1.Logic.Services
@using Microsoft.AspNetCore.Authorization
@using System.IO
@using ClosedXML.Excel
@inject IJSRuntime JS

@attribute [Authorize]
@rendermode InteractiveServer

@inject DistilleryService Service

@code {
    private int tankId;
    private Tank selectedTank = new();
    private List<TankLogRecord> tankLogs = new List<TankLogRecord>();

    private async Task LoadTankHistory()
    {
        tankLogs = await Service.GetTankHistoryAsync(selectedTank.Id);
    }

    private async Task DownloadExcel()
    {
        using var workbook = new XLWorkbook();
        var worksheet = workbook.Worksheets.Add("Tank History");

        // Set header
        worksheet.Cell(1, 1).Value = "Date";
        worksheet.Cell(1, 2).Value = "Operation";
        worksheet.Cell(1, 3).Value = "Source/Destination";
        worksheet.Cell(1, 4).Value = "V Before";
        worksheet.Cell(1, 5).Value = "V Change";
        worksheet.Cell(1, 6).Value = "V After";

        // Fill data
        for (int i = 0; i < tankLogs.Count; i++)
        {
            var log = tankLogs[i];
            worksheet.Cell(i + 2, 1).Value = log.Date;
            worksheet.Cell(i + 2, 2).Value = log.Operation.ToString();
            worksheet.Cell(i + 2, 3).Value = log.GetSourceDestinationName();
            worksheet.Cell(i + 2, 4).Value = log.VolumeBeforeChange;
            worksheet.Cell(i + 2, 5).Value = log.VolumeChange;
            worksheet.Cell(i + 2, 6).Value = log.VolumeBeforeChange + log.VolumeChange;
        }

        using var stream = new MemoryStream();
        workbook.SaveAs(stream);
        stream.Seek(0, SeekOrigin.Begin);

        // Use JS runtime to trigger a file download
        var fileName = $"tank_{selectedTank?.Name}_{DateTime.Now.ToString("yyMMddHHmm")}";

        await JS.InvokeVoidAsync("downloadFile", stream.ToArray(), fileName, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
    }
}

<h3>Tank History</h3>

<label>Tank ID: </label>
<TankDropdown SelectedTank="@selectedTank" SelectedTankChanged="@(tank => selectedTank = tank)" />

<button @onclick="LoadTankHistory" class="btn btn-primary mt-2">Load History</button>
<button @onclick="DownloadExcel" class="btn btn-secondary mt-2">Download Excel</button>

@if (tankLogs.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Operation</th>
                <th>Source/Destination</th>
                <th>V Before</th>
                <th>V Change</th>
                <th>V After</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var log in tankLogs)
            {
                <tr>
                    <td>@log.Date</td>
                    <td>@log.Operation</td>
                    <td>@(log.GetSourceDestinationName())</td>
                    <td>@log.VolumeBeforeChange</td>
                    <td>@log.VolumeChange</td>
                    <td>@(log.VolumeBeforeChange + log.VolumeChange)</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No history available for this tank.</p>
}
