@page "/add-liquid"
@using Agas1.Logic.Models
@using Agas1.Logic.Services
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]
@rendermode InteractiveServer

@inject DistilleryService Service

@code {
    private Tank selectedTank = new();  // Default to 0 (no tank selected)
    private int selectedLiquidTypeId;
    private List<LiquidType> liquidTypes = new List<LiquidType>();
    private double volume;
    private string message;
    private bool isSuccess;


    // Use async method to load data once
    protected override async Task OnInitializedAsync()
    {
        liquidTypes = await Service.GetLiquidTypesAsync();
    }

    // Async method to add liquid to the tank
    private async Task AddLiquidToTank()
    {
        isSuccess = false;

        if (selectedTank.Id == 0)  // Ensure the user has selected a valid tank
        {
            message = "Please select a valid tank.";
            return;
        }
        if(volume <= 0)
        {
            message = "Please select a valid volume.";
            return;
        }

        try
        {
            var selectedLiquidType = liquidTypes.FirstOrDefault(lt => lt.Id == selectedLiquidTypeId);

            if ( selectedLiquidType == null)
            {
                message = "Invalid tank or liquid type selected.";
                return;
            }

            var previousVolume = selectedTank.Volume;  // Get the tank's previous volume
            var updatedTank= await Service.FillTankFromExternalResource(selectedTank.Id, selectedLiquidTypeId, volume);

        
            message = $"successfully completed | tank {selectedTank.Name} | volume before {previousVolume} | volume chaenged {volume} | current volume {updatedTank.Volume} ";

            isSuccess = true;
            ResetForm();
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
    }

    // Method to reset the form fields
    private void ResetForm()
    {
        selectedLiquidTypeId = 0;  // Reset liquid type selection
        volume = 0;  // Reset volume
       // selectedTank =new();
    }
}

<h3>Add Liquid to Tank</h3>
<TankDropdown SelectedTank="@selectedTank" SelectedTankChanged="@(tank => selectedTank = tank)" />

<br />


<label>Liquid Type: </label>
<select @bind="selectedLiquidTypeId" class="form-select">
    @foreach (var type in liquidTypes)
    {
            <option value="@type.Id">@type.Name</option>
    }
</select>
<br />

<!-- Volume input -->
<label>Volume (liters): </label>
<input type="number" @bind="volume" class="form-control" />
<br />

<!-- Submit button -->
<button @onclick="AddLiquidToTank" class="btn btn-primary">Add Liquid</button>

@if (!string.IsNullOrEmpty(message))
{
        <div class="alert @(isSuccess ?"alert-success" :  "alert-danger") mt-3">@message</div>
}
